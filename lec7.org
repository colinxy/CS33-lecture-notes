#+TITLE: Lecture 7
#+DATE: <2016-04-18 Mon>
#+OPTIONS: author:nil


* Structures

** Structure Representation

 - structure represented as block of memory
 - fields ordered according to declaration
 - compiler determines overall size + position of fields

#+BEGIN_SRC C

  struct rec {
    int a[4];
    size_t i;
    struct rec *next;
  }

  int *get_ap(struct rec *r, size_t idx) {
    return &r->a[idx];
  }

  void set_val(struct rec *r, int val) {
    while (r) {
      int i = r->i;
      r->a[i] = val;
      r = r->next;
    }
  }

#+END_SRC

#+ATTR_HTML: :width 500px
[[./res/structure.png]]

| register | variable        |
|----------+-----------------|
| =%rdi=   | first argument  |
| =%rsi=   | second argument |

#+BEGIN_SRC asm

  get_ap:
        leaq    (%rdi,%rsi,4), %rax
        ret

  set_val:
  .L11:
        movsql    16(%rdi), %rax
        movl      %esi, (%rdi,%rax,4)
        movq      24(%rdi), %rdi
        testq     %rdi, %rdi
        jne       .L11
        ret

#+END_SRC


** Structures and Alignment

 - Aligned Data
   - primitive data type requires =K= bytes
     - =K= = *_largest alignment of any element in struct_*
   - address must be multiple of =K=

 - Motivation
   - memory accessed by (aligned) chunks of 4 or 8 bytes
     - inefficient to load or store datum that spans quad word boundaries
     - virtual memory trickier when datum spans 2 pages

| bytes    | example               | requirement                          |
|----------+-----------------------+--------------------------------------|
| 1 byte   | =char=                | no restriction                       |
| 2 bytes  | =short=               | lowest 1 bit of address must be 0    |
| 4 bytes  | =int, float=          | lowest 2 bit of address must be 00   |
| 8 bytes  | =double, long, char*= | lowest 3 bit of address must be 000  |
| 16 bytes | =long double=         | lowest 4 bit of address must be 0000 |


** Satisfying Alignment with Structures

 - within structure
   - satisfy each element's alignment requirement
 - overall structure placement
   - each structure has alignment requirement =K=
     - =K= = largest alignment of any element in struct
   - initial address & structure must be multiples of =K=

*** example

**** struct

 - =K= = 8, due to =double= element

#+BEGIN_SRC C

  struct S1 {
    char c;
    int i[2];
    double v;
  } *p;

#+END_SRC

#+ATTR_HTML: :width 500px
[[./res/structure_alignment1.png]]

**** reordered within struct

#+BEGIN_SRC C

  struct S2 {
    double v;
    int i[2];
    char c;
  } *p;

#+END_SRC

#+ATTR_HTML: :width 500px
[[./res/structure_alignment2.png]]


** Arrays of Structures

#+BEGIN_SRC C

  struct S2 {
    double v;
    int i[2];
    char c;
  } a[10];

#+END_SRC

#+ATTR_HTML: :width 500px
[[./res/array_of_structure.png]]

 - overall structure length of multiple of =K=
 - satify alignment requirement for every element

*** Access Array Elements

#+BEGIN_SRC C

  struct S3 {
    short i;
    float v;
    short j;
  } a[10];

  short get_j(int idx) {
    return a[idx].j;
  }

#+END_SRC

#+BEGIN_SRC asm

  leaq    (%rdi,%rdi,2), %rax     ;%rax *= 3
  movzwl  a+8(,%rax,4), %eax

#+END_SRC

#+ATTR_HTML: :width 500px
[[./res/structure_array.png]]

 - compute array offset =12 * idx=
   - =sizeof(S3)=, including alignment spacers
 - element j is at offset 8 within structure
 - assembler gives offset a+8 (resolved during linking)


*** Save Space

 - put large data types first

#+BEGIN_SRC C

  struct s4 {
    char c;
    int i;
    char d;
  };

  struct s5 {
    int i;
    char c;
    char d;
  };

#+END_SRC

 - s4 : 12 bytes

#+ATTR_HTML: :width 500px
[[./res/structure_save_space_s4.png]]

 - s5 : 8 bytes

#+ATTR_HTML: :width 500px
[[./res/structure_save_space_s5.png]]


* Union

** Union Allocation

 - allocate according to largest element
 - can only use 1 field at a time

#+BEGIN_SRC C

  union u1 {
    char c;
    int i[2];
    double v;
  } *up;

  struct s1 {
    char c;
    int i[2];
    double v;
  } *sp;

#+END_SRC

 - =union=

#+ATTR_HTML: :width 500px
[[./res/union.png]]


 - =struct=

#+ATTR_HTML: :width 500px
[[./res/structure_.png]]


#+BEGIN_SRC C

  typedef union {
    float f;
    unsigned u;
  } bit_float_t;

  bit_float_t arg;
  arg.u;                          /* interpret arg as unsigned */
  arg.f;                          /* interpret arg as float */

#+END_SRC

 - interpret bytes pattern as =unsigned= / =float=
 - not same as casting


* Byte Ordering Revisited

 - =short= / =long= / =quad= stored in memory as 2/4/8 consecutive bytes
 - which byte is most significant
 - can cause problem across machine

** Big Endian

 - most significant byte has lowest address
 - e.g. Sparc

** Little Endian

 - least significant byte has lowest address
 - e.g. Intel x86, ARM Android, iOS

** Bi Endian

 - can be configured either way
 - e.g. ARM

** example

#+BEGIN_SRC C

  union {
    unsigned char c[8];
    unsigned short s[4];
    unsigned int i[2];
    unsigned long l[1];
  } dw;

#+END_SRC

*** 32 bit, Little Endian

#+ATTR_HTML: :width 500px
[[./res/little_endian.png]]

*** 32 bit, Big Endian

#+ATTR_HTML: :width 500px
[[./res/big_endian.png]]


* Summary of Compound Types in C

** Arrays

 - contiguous allocation of memory
 - aligned to satisfy every element's alignment requirement
 - pointer to first element
 - no bounds checking

** Structure

 - allocate bytes in order declared
 - pad in middle and at end to satify alignment

** Unions

 - overlay declarations
 - way to circumvent type system
