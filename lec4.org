#+DATE: <2016-04-06 Wed>

* Condition Codes

 - Single bit registers
   - CF: carry flag
   - ZF: zero flag
   - SF: sign flag
   - OF: overflow flag

** Not set by =leaq= instruction

** Implicitly Set by Arithmetic Operations

*** example

=addq src, dest=

=t = a + b=

 - CF set if carried out from most significant bit (unsigned overflow)
 - ZF set if ~t == 0~
 - SF set if =t < 0= (signed)
 - OF set if 2's complement overflow
   - =(a<0 && b<0 && t>=0) || (a>0 && b>0 && t<0)=


** Explicitly Set

*** By Compare Instruction

=cmpq b, a= : like computing =a - b= without destination

 - CF set if carry out from most significant bit (unsigned comparison)
 - ZF set if ~a == b~
 - SF set if =(a - b) < 0= (signed)
 - OF set if 2's complement overflow (signed)
   - =(a<0 && b>0 && (a-b)>0) || (a>0 && b<0 && (a-b)<0)=

*** By Test Instruction

=testq b, a= : like computing =a & b= without setting destination

 - ZF set if ~a & b == 0~
 - SF set if ~a & b < 0~


** Reading conditional codes

*** setX Instructions

 - set low-order byte of destination to 0 or 1 based on
   combinations of condition codes
 - does not alter remaining 7 bytes
   - use =movzbl= to set upper bits to 0


| setX    | condition            | description               |
|---------+----------------------+---------------------------|
| =sete=  | =ZF=                 | equal / zero              |
| =setne= | =~ZF=                | not equal / not zero      |
| =sets=  | =SF=                 | negative                  |
| =setns= | =~SF=                | nonnegative               |
| =setg=  | =~(SF^OF)&~ZF=       | greater (signed)          |
| =setge= | =~(SF^OF)=           | greater or equal (signed) |
| =setl=  | =(SF^OF)=            | less (signed)             |
| =setle= | =(SF^OF)= \vert =ZF= | less or equal (signed)    |
| =seta=  | =~CF&~ZF=            | above (unsigned)          |
| =setb=  | =CF=                 | below (unsigned)          |

#+CAPTION: x84-64 integer registers
| 8 bytes | last 1 byte | note            |
|---------+-------------+-----------------|
| =%rax=  | =%al=       |                 |
| =%rbx=  | =%bl=       |                 |
| =%rcx=  | =%cl=       |                 |
| =%rdx=  | =%dl=       |                 |
| =%rsi=  | =%sil=      |                 |
| =%rdi=  | =%dil=      |                 |
| =%rsp=  | =%spl=      | _stack pointer_ |
| =%rbp=  | =%bpl=      |                 |
| =%r8=   | =%r8b=      |                 |
| =%r9=   | =%r9b=      |                 |
| =%r10=  | =%r10b=     |                 |
| =%r11=  | =%r11b=     |                 |
| =%r12=  | =%r12b=     |                 |
| =%r13=  | =%r13b=     |                 |
| =%r14=  | =%r14b=     |                 |
| =%r15=  | =%r15b=     |                 |


*** example

#+BEGIN_SRC C

  long gt(long x, long y) {
    return x > y;
  }

#+END_SRC

converted to assmebly

| 8 byte register | last 1 byte | variable     |
|-----------------+-------------+--------------|
| =%rdi=          |             | =x=          |
| =%rsi=          |             | =y=          |
| =%rax=          | =%al=       | return value |

#+BEGIN_SRC asm

  cmpq    %rsi, %rdi              ;compare x, y
  setg    %al                     ;set last byte of %rax to comparison result
  movzbl  %al, %rax               ;set result of %rax to 0

#+END_SRC


* Conditional Branch / Move

** Jumping, Conditional Branch

 - jump to different part of code depending on condition codes

| jX    | condition            | description               |
|-------+----------------------+---------------------------|
| =jmp= | =1=                  | unconditional             |
| =je=  | =ZF=                 | equal / zero              |
| =jne= | =~ZF=                | not equal / not zero      |
| =js=  | =SF=                 | negative                  |
| =jns= | =~SF=                | nonnegative               |
| =jg=  | =~(SF^OF)&~ZF=       | greater (signed)          |
| =jge= | =~(SF^OF)=           | greater or equal (signed) |
| =jl=  | =(SF^OF)=            | less (signed)             |
| =jle= | =(SF^OF)= \vert =ZF= | less or equal (signed)    |
| =ja=  | =~CF&~ZF=            | above (unsigned)          |
| =jb=  | =CF=                 | below (unsigned)          |

*** Conditional Branch example

#+BEGIN_SRC C

  long absdiff(long x, long y) {
    long result;
    if (x > y)
      result = x - y;
    else
      result = y - x;
    return result;
  }

#+END_SRC

| register | variable |
|----------+----------|
| =%rdi=   | =x=      |
| =%rsi=   | =y=      |
| =%rax=   | =result= |

#+BEGIN_SRC asm

  absdiff:
        cmpq      %rsi, %rdi      ;compare x, y
        jle       .L4             ;jump if x <= y
        movq      %rdi, %rax      ;%rax = %rdi (result = x)
        subq      %rsi, %rax      ;%rax = %rax - %rsi (result -= y)
        ret
  .L4:
        movq      %rsi, %rax      ;%rax = %rsi (result = y)
        subq      %rdi, %rax      ;%rax = %rax - %rdi (result -= x)
        ret

#+END_SRC

Express with goto code

#+BEGIN_SRC C

  long absdiff_j(long x, long y) {
    long result;
    int ntest = (x <= y);
    if (ntest)
      goto Else;

    result = x - y;
    goto Done;

  Else:
    result = y - x;

  Done:
    return result;
  }

#+END_SRC


** Conditional Move

 - Conditional Move Instructions
   - instruction supports
     - =if (Test) Dest= ~<=~ =Src=

   - branches are disruptive to instruction flow through pipelines
   - conditional moves do not require control transfer

*** Bad cases for conditional move

_Both values get computed_

 - expensive computations
   - =test(x) ? Hard1(x) : Hard2(x)=
   - both values get computed
   - only make sense when computations are simple

 - risky computation
   - =p ? *p : 0=
   - both values get computed
   - may have undesirable result

 - computation with side effect
   - =x > 0 ? x= ~*=~ =7 : x= ~+=~ =3=
   - both values get computed
   - must be side effect free


*** conditional move example

#+BEGIN_SRC C

  long absdiff_move(long x, long y) {
    long result;
    result = (x > y) ? (x - y) : (y - x);
    return result;
  }

#+END_SRC

 - =cmovle= : conditional move when less than or equal to
 - using conditional move

| register | variable           |
|----------+--------------------|
| =%rdi=   | =x=                |
| =%rsi=   | =y=                |
| =%rax=   | =result=           |
| =%rdx=   | intermediate value |

#+BEGIN_SRC asm

  absdiff_move:
        movq      %rdi, %rax      ;%rax = %rdi (result = x)
        subq      %rsi, %rax      ;%rax = %rax - %rsi (result -= y)
        movq      %rsi, %rdx      ;%rdx = %rsi (alternate_result = y)
        subq      %rdi, %rdx      ;%rdx = %rdx - %rdi (alternate_result -= x)
        cmpq      %rsi, %rdi      ;compare x, y
        cmovle    %rdx, %rax      ;move %rdx to %rax only when x <= y
        ret

#+END_SRC


* Loop

** Do-While Loop

*** example

 - count number of 1's in argument x

do-while version

#+BEGIN_SRC C

  long pcount_do(unsigned long x) {
    long result = 0;
    do {
      result += x & 0x1;
      x >> 1;
    } while (x);
    return result;
  }

#+END_SRC

goto version

#+BEGIN_SRC C

  long pcount_goto(unsigned long x) {
    long result = 0;
  loop:
    result += x & 0x1;
    x >> 1;
    if (x)
      goto loop;
    return result;
  }

#+END_SRC

| register | variable |
|----------+----------|
| =%rdi=   | =x=      |
| =%rax=   | =result= |

#+BEGIN_SRC asm

        movl      $0, %rax        ;result = 0
  .L2:
        movq      %rdi, %rdx
        andl      $1,   %edx
        addq      %rdx, %rax
        shrq      %rdi
        jne       .L2
        ret

#+END_SRC


* Switch
